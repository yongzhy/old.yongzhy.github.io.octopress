<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhu Yong</title>
    <link>http://zhuyong.me/categories/c/index.xml</link>
    <description>Recent content on Zhu Yong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://zhuyong.me/categories/c/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ARM RVCT tips: armcc &amp;amp;&amp;amp; fromelf</title>
      <link>http://zhuyong.me/blog/2014/12/12/arm-rvct-tips-armcc-and-and-fromelf/</link>
      <pubDate>Fri, 12 Dec 2014 15:54:19 +0000</pubDate>
      
      <guid>http://zhuyong.me/blog/2014/12/12/arm-rvct-tips-armcc-and-and-fromelf/</guid>
      <description>&lt;p&gt;For embedded system C projects that share same code base, one common practice is to use various feature flags to encapsulate related code. This results difficulty in code reading, especially when you have huge amounts of feature flags, especially when flags&amp;rsquo; value depend on value of other flags. This is what I am dealing with in current project. And I found &lt;code&gt;armcc&lt;/code&gt; and &lt;code&gt;fromelf&lt;/code&gt; have some useful feature to help developer in such situation.&lt;/p&gt;

&lt;p&gt;First, &lt;code&gt;armcc&lt;/code&gt;, the compiler from ARM RVCT. Command line options are &lt;code&gt;--debug --debug_macros -E&lt;/code&gt;, this will generate raw C file with all preprocessors been parsed, you can see how is a macro been defined.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--debug&lt;/code&gt; is to enable generate debug information&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--debug_macros&lt;/code&gt; is generate debug entry for macros. You can see the expanded macro in the generated C source code. &lt;a href=&#34;http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0491h/CIHHDEAA.html&#34;&gt;doc here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-E&lt;/code&gt; is to tell compiler not compile the C file, just excute the preprocess step. &lt;a href=&#34;http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0491h/CIHIDBBG.html&#34;&gt;doc here&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Second, &lt;code&gt;fromelf&lt;/code&gt;, imaging you have a complicated data structure defined, of which, some elements depends on some feature flags, to find out the difference between two different configurations, instead of load into debugger and compare, you can just use &lt;code&gt;fromelf&lt;/code&gt; to dump the structure and use a diff tool to compare.&lt;/p&gt;

&lt;p&gt;The command line is &lt;code&gt;fromelf --fieldoffsets --select=the_structure.* --output=the_structure.txt final.axf&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--fieldoffsets&lt;/code&gt; produce offset for each structure elements. &lt;a href=&#34;http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0477i/BABJBGBH.html&#34;&gt;doc here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--select=the_structure.*&lt;/code&gt; to select the data structure to output&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--output&lt;/code&gt; to specify output file contain the listing&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>C Code Unit Testing Using cmocka</title>
      <link>http://zhuyong.me/blog/2014/03/19/c-code-unit-testing-using-cmocka/</link>
      <pubDate>Wed, 19 Mar 2014 16:22:53 +0000</pubDate>
      
      <guid>http://zhuyong.me/blog/2014/03/19/c-code-unit-testing-using-cmocka/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://cmocka.org/&#34;&gt;cmocka&lt;/a&gt; is a unit testing framework for C, it is developed based on Google&amp;rsquo;s project &lt;a href=&#34;https://code.google.com/p/cmockery/&#34;&gt;cmockery&lt;/a&gt;. It was easy to use, and the author corrected some bugs from &lt;code&gt;cmockery&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;install-cmocka&#34;&gt;Install cmocka&lt;/h3&gt;

&lt;p&gt;First download source code for latest version of &lt;code&gt;cmocka&lt;/code&gt; from &lt;a href=&#34;https://open.cryptomilk.org/projects/cmocka/files&#34;&gt;https://open.cryptomilk.org/projects/cmocka/files&lt;/a&gt;. Current latest version is 0.3.2, and the source file is &lt;code&gt;cmocka-0.3.2.tar.xz&lt;/code&gt;. &lt;code&gt;cmake&lt;/code&gt; is required to build &lt;code&gt;cmocka&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/Downloads
$ xz -d cmocka-0.3.2.tar.xz
$ tar vxf cmocka-0.3.2.tar
$ cd cmocka-0.3.2
$ mkdir build
$ cd build
$ cmake -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_BUILD_TYPE=Release ..
$ make
$ sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;use-cmocka&#34;&gt;Use cmocka&lt;/h3&gt;

&lt;p&gt;Create source file with test cases. Simple example would be like:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;setjmp.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;cmocka.h&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;state)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;assert_int_equal(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;assert_int_not_equal(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;UnitTest&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tests[]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; 
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;unit_test(test),&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;run_tests(tests);&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;save file as `cmockatest.c&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gcc cmockatest.c -lcmocka -o cmockatest
$ ./cmockatest

[==========] Running 1 test(s).
[ RUN      ] test
3 == 3
cmocka.c:8: error: Failure!
[  FAILED  ] test
[==========] 1 test(s) run.
[  PASSED  ] 0 test(s).
[  FAILED  ] 1 test(s), listed below:
[  FAILED  ] test
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.cryptomilk.org/2013/01/14/cmocka-a-unit-testing-framework-for-c/&#34;&gt;cmocka author&amp;rsquo;s blog post&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lwn.net/Articles/558106/&#34;&gt;Unit testing with mock objects in C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cmocka.org/api/&#34;&gt;cmocka API Documents&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Linux Is Always The Number 1?</title>
      <link>http://zhuyong.me/blog/2014/01/17/linux-is-always-the-number-1/</link>
      <pubDate>Fri, 17 Jan 2014 13:59:00 +0000</pubDate>
      
      <guid>http://zhuyong.me/blog/2014/01/17/linux-is-always-the-number-1/</guid>
      <description>

&lt;p&gt;Yesterday I read an article &lt;a href=&#34;http://arjunsreedharan.org/post/71403510912/c-language-and-the-linux-macro-proof-that-linux-is&#34;&gt;C language and the linux macro - proof that linux is always Number 1&lt;/a&gt;. It shows a simple C code which just define variable &lt;code&gt;linux&lt;/code&gt; and assign with a value, but &lt;code&gt;gcc&lt;/code&gt; produce error when compile it.&lt;/p&gt;

&lt;p&gt;Code of the simple program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;

int main() {
    int linux = 701;
    printf(&amp;quot;%d&amp;quot;, linux);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Error message from &lt;code&gt;gcc&lt;/code&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;code.c: In function ‘main’:
code.c:4:6: error: expected identifier or ‘(’ before numeric constant
int linux = 701;
    ^
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If preprocess the program using &lt;code&gt;gcc -E code.c&lt;/code&gt;, the output programe code is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int main() {
    int 1 = 701;
    printf(&amp;quot;%d\n&amp;quot;, 1);
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s very obvious that &lt;code&gt;linux&lt;/code&gt; is &lt;code&gt;#define&lt;/code&gt; somewhere with value &lt;code&gt;1&lt;/code&gt;. But the code only included &lt;code&gt;stdio.h&lt;/code&gt; file and there is no such define in this header file. After search Google, I have found the explanantion from stackoverflow.&lt;/p&gt;

&lt;p&gt;Word such as &lt;code&gt;unix&lt;/code&gt; or &lt;code&gt;vax&lt;/code&gt; was defined in the pre-ANSI days to detect the system at compile time. To make the compile process pass, just pass parameter &lt;code&gt;-std=c89&lt;/code&gt; or &lt;code&gt;-std=c99&lt;/code&gt; to &lt;code&gt;gcc&lt;/code&gt; will do.&lt;/p&gt;

&lt;h4 id=&#34;related-questions-from-stackoverflow&#34;&gt;Related Questions From Stackoverflow:&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/19210935/why-does-the-c-preprocessor-interpret-the-word-linux-as-the-constant-1&#34;&gt;Stackoverflow Question 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/3770322/is-unix-restricted-keyword-in-c&#34;&gt;Stackoverflow Question 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>